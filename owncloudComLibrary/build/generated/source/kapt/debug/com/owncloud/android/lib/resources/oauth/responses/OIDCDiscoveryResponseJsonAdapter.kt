// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.owncloud.android.lib.resources.oauth.responses

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class OIDCDiscoveryResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<OIDCDiscoveryResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("authorization_endpoint",
      "check_session_iframe", "end_session_endpoint", "issuer", "registration_endpoint",
      "response_types_supported", "scopes_supported", "token_endpoint",
      "token_endpoint_auth_methods_supported", "userinfo_endpoint")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "authorization_endpoint")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "check_session_iframe")

  private val listOfStringAdapter: JsonAdapter<List<String>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "response_types_supported")

  private val nullableListOfStringAdapter: JsonAdapter<List<String>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "scopes_supported")

  public override fun toString(): String = buildString(43) {
      append("GeneratedJsonAdapter(").append("OIDCDiscoveryResponse").append(')') }

  public override fun fromJson(reader: JsonReader): OIDCDiscoveryResponse {
    var authorization_endpoint: String? = null
    var check_session_iframe: String? = null
    var end_session_endpoint: String? = null
    var issuer: String? = null
    var registration_endpoint: String? = null
    var response_types_supported: List<String>? = null
    var scopes_supported: List<String>? = null
    var token_endpoint: String? = null
    var token_endpoint_auth_methods_supported: List<String>? = null
    var userinfo_endpoint: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> authorization_endpoint = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("authorization_endpoint", "authorization_endpoint", reader)
        1 -> check_session_iframe = nullableStringAdapter.fromJson(reader)
        2 -> end_session_endpoint = nullableStringAdapter.fromJson(reader)
        3 -> issuer = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("issuer",
            "issuer", reader)
        4 -> registration_endpoint = nullableStringAdapter.fromJson(reader)
        5 -> response_types_supported = listOfStringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("response_types_supported", "response_types_supported",
            reader)
        6 -> scopes_supported = nullableListOfStringAdapter.fromJson(reader)
        7 -> token_endpoint = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("token_endpoint", "token_endpoint", reader)
        8 -> token_endpoint_auth_methods_supported = nullableListOfStringAdapter.fromJson(reader)
        9 -> userinfo_endpoint = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return OIDCDiscoveryResponse(
        authorization_endpoint = authorization_endpoint ?:
            throw Util.missingProperty("authorization_endpoint", "authorization_endpoint", reader),
        check_session_iframe = check_session_iframe,
        end_session_endpoint = end_session_endpoint,
        issuer = issuer ?: throw Util.missingProperty("issuer", "issuer", reader),
        registration_endpoint = registration_endpoint,
        response_types_supported = response_types_supported ?:
            throw Util.missingProperty("response_types_supported", "response_types_supported",
            reader),
        scopes_supported = scopes_supported,
        token_endpoint = token_endpoint ?: throw Util.missingProperty("token_endpoint",
            "token_endpoint", reader),
        token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported,
        userinfo_endpoint = userinfo_endpoint
    )
  }

  public override fun toJson(writer: JsonWriter, value_: OIDCDiscoveryResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("authorization_endpoint")
    stringAdapter.toJson(writer, value_.authorization_endpoint)
    writer.name("check_session_iframe")
    nullableStringAdapter.toJson(writer, value_.check_session_iframe)
    writer.name("end_session_endpoint")
    nullableStringAdapter.toJson(writer, value_.end_session_endpoint)
    writer.name("issuer")
    stringAdapter.toJson(writer, value_.issuer)
    writer.name("registration_endpoint")
    nullableStringAdapter.toJson(writer, value_.registration_endpoint)
    writer.name("response_types_supported")
    listOfStringAdapter.toJson(writer, value_.response_types_supported)
    writer.name("scopes_supported")
    nullableListOfStringAdapter.toJson(writer, value_.scopes_supported)
    writer.name("token_endpoint")
    stringAdapter.toJson(writer, value_.token_endpoint)
    writer.name("token_endpoint_auth_methods_supported")
    nullableListOfStringAdapter.toJson(writer, value_.token_endpoint_auth_methods_supported)
    writer.name("userinfo_endpoint")
    nullableStringAdapter.toJson(writer, value_.userinfo_endpoint)
    writer.endObject()
  }
}
