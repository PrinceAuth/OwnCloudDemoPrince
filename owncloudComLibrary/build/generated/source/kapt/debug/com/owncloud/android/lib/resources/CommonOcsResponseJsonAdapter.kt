// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.owncloud.android.lib.resources

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Type
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CommonOcsResponseJsonAdapter<T>(
  moshi: Moshi,
  types: Array<Type>
) : JsonAdapter<CommonOcsResponse<T>>() {
  init {
    require(types.size == 1) {
      buildString { append("TypeVariable mismatch: Expecting ").append(1).append(" type for generic type variables [").append("T").append("], but received ").append(types.size) }
    }
  }

  private val options: JsonReader.Options = JsonReader.Options.of("ocs")

  private val oCSResponseOfTNullableAnyAdapter: JsonAdapter<OCSResponse<T>> =
      moshi.adapter(Types.newParameterizedType(OCSResponse::class.java, types[0]), emptySet(),
      "ocs")

  public override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("CommonOcsResponse").append(')') }

  public override fun fromJson(reader: JsonReader): CommonOcsResponse<T> {
    var ocs: OCSResponse<T>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> ocs = oCSResponseOfTNullableAnyAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("ocs", "ocs", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return CommonOcsResponse<T>(
        ocs = ocs ?: throw Util.missingProperty("ocs", "ocs", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: CommonOcsResponse<T>?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("ocs")
    oCSResponseOfTNullableAnyAdapter.toJson(writer, value_.ocs)
    writer.endObject()
  }
}
