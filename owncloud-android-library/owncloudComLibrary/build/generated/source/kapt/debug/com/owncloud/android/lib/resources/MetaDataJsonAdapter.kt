// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.owncloud.android.lib.resources

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class MetaDataJsonAdapter(
  moshi: Moshi
) : JsonAdapter<MetaData>() {
  private val options: JsonReader.Options = JsonReader.Options.of("status", "statuscode", "message",
      "itemsperpage", "totalitems")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "status")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "statusCode")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "message")

  public override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("MetaData").append(')') }

  public override fun fromJson(reader: JsonReader): MetaData {
    var status: String? = null
    var statusCode: Int? = null
    var message: String? = null
    var itemsPerPage: String? = null
    var totalItems: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> status = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("status",
            "status", reader)
        1 -> statusCode = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("statusCode",
            "statuscode", reader)
        2 -> message = nullableStringAdapter.fromJson(reader)
        3 -> itemsPerPage = nullableStringAdapter.fromJson(reader)
        4 -> totalItems = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return MetaData(
        status = status ?: throw Util.missingProperty("status", "status", reader),
        statusCode = statusCode ?: throw Util.missingProperty("statusCode", "statuscode", reader),
        message = message,
        itemsPerPage = itemsPerPage,
        totalItems = totalItems
    )
  }

  public override fun toJson(writer: JsonWriter, value_: MetaData?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("status")
    stringAdapter.toJson(writer, value_.status)
    writer.name("statuscode")
    intAdapter.toJson(writer, value_.statusCode)
    writer.name("message")
    nullableStringAdapter.toJson(writer, value_.message)
    writer.name("itemsperpage")
    nullableStringAdapter.toJson(writer, value_.itemsPerPage)
    writer.name("totalitems")
    nullableStringAdapter.toJson(writer, value_.totalItems)
    writer.endObject()
  }
}
