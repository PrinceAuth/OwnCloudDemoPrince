// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.owncloud.android.lib.resources.status.responses

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ServerVersionJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ServerVersion>() {
  private val options: JsonReader.Options = JsonReader.Options.of("major", "minor", "micro",
      "string", "edition")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "major")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "string")

  public override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("ServerVersion").append(')') }

  public override fun fromJson(reader: JsonReader): ServerVersion {
    var major: Int? = null
    var minor: Int? = null
    var micro: Int? = null
    var string: String? = null
    var edition: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> major = nullableIntAdapter.fromJson(reader)
        1 -> minor = nullableIntAdapter.fromJson(reader)
        2 -> micro = nullableIntAdapter.fromJson(reader)
        3 -> string = nullableStringAdapter.fromJson(reader)
        4 -> edition = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ServerVersion(
        major = major,
        minor = minor,
        micro = micro,
        string = string,
        edition = edition
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ServerVersion?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("major")
    nullableIntAdapter.toJson(writer, value_.major)
    writer.name("minor")
    nullableIntAdapter.toJson(writer, value_.minor)
    writer.name("micro")
    nullableIntAdapter.toJson(writer, value_.micro)
    writer.name("string")
    nullableStringAdapter.toJson(writer, value_.string)
    writer.name("edition")
    nullableStringAdapter.toJson(writer, value_.edition)
    writer.endObject()
  }
}
