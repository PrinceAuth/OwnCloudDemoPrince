// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.owncloud.android.lib.resources.oauth.responses

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ClientRegistrationResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ClientRegistrationResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("client_id", "client_secret",
      "client_id_issued_at", "client_secret_expires_at")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "clientId")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "clientSecret")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "clientIdIssuedAt")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "clientSecretExpiration")

  public override fun toString(): String = buildString(48) {
      append("GeneratedJsonAdapter(").append("ClientRegistrationResponse").append(')') }

  public override fun fromJson(reader: JsonReader): ClientRegistrationResponse {
    var clientId: String? = null
    var clientSecret: String? = null
    var clientIdIssuedAt: Int? = null
    var clientSecretExpiration: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> clientId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("clientId",
            "client_id", reader)
        1 -> clientSecret = nullableStringAdapter.fromJson(reader)
        2 -> clientIdIssuedAt = nullableIntAdapter.fromJson(reader)
        3 -> clientSecretExpiration = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("clientSecretExpiration", "client_secret_expires_at", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ClientRegistrationResponse(
        clientId = clientId ?: throw Util.missingProperty("clientId", "client_id", reader),
        clientSecret = clientSecret,
        clientIdIssuedAt = clientIdIssuedAt,
        clientSecretExpiration = clientSecretExpiration ?:
            throw Util.missingProperty("clientSecretExpiration", "client_secret_expires_at", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ClientRegistrationResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("client_id")
    stringAdapter.toJson(writer, value_.clientId)
    writer.name("client_secret")
    nullableStringAdapter.toJson(writer, value_.clientSecret)
    writer.name("client_id_issued_at")
    nullableIntAdapter.toJson(writer, value_.clientIdIssuedAt)
    writer.name("client_secret_expires_at")
    intAdapter.toJson(writer, value_.clientSecretExpiration)
    writer.endObject()
  }
}
