// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.owncloud.android.lib.resources.status.responses

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class FileSharingPublicJsonAdapter(
  moshi: Moshi
) : JsonAdapter<FileSharingPublic>() {
  private val options: JsonReader.Options = JsonReader.Options.of("enabled", "upload",
      "supports_upload_only", "multiple", "password", "expire_date")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "enabled")

  private val nullableFileSharingPublicPasswordAdapter: JsonAdapter<FileSharingPublicPassword?> =
      moshi.adapter(FileSharingPublicPassword::class.java, emptySet(), "fileSharingPublicPassword")

  private val nullableFileSharingPublicExpireDateAdapter: JsonAdapter<FileSharingPublicExpireDate?>
      = moshi.adapter(FileSharingPublicExpireDate::class.java, emptySet(),
      "fileSharingPublicExpireDate")

  public override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("FileSharingPublic").append(')') }

  public override fun fromJson(reader: JsonReader): FileSharingPublic {
    var enabled: Boolean? = null
    var fileSharingPublicUpload: Boolean? = null
    var fileSharingPublicUploadOnly: Boolean? = null
    var fileSharingPublicMultiple: Boolean? = null
    var fileSharingPublicPassword: FileSharingPublicPassword? = null
    var fileSharingPublicExpireDate: FileSharingPublicExpireDate? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> enabled = nullableBooleanAdapter.fromJson(reader)
        1 -> fileSharingPublicUpload = nullableBooleanAdapter.fromJson(reader)
        2 -> fileSharingPublicUploadOnly = nullableBooleanAdapter.fromJson(reader)
        3 -> fileSharingPublicMultiple = nullableBooleanAdapter.fromJson(reader)
        4 -> fileSharingPublicPassword = nullableFileSharingPublicPasswordAdapter.fromJson(reader)
        5 -> fileSharingPublicExpireDate =
            nullableFileSharingPublicExpireDateAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return FileSharingPublic(
        enabled = enabled,
        fileSharingPublicUpload = fileSharingPublicUpload,
        fileSharingPublicUploadOnly = fileSharingPublicUploadOnly,
        fileSharingPublicMultiple = fileSharingPublicMultiple,
        fileSharingPublicPassword = fileSharingPublicPassword,
        fileSharingPublicExpireDate = fileSharingPublicExpireDate
    )
  }

  public override fun toJson(writer: JsonWriter, value_: FileSharingPublic?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("enabled")
    nullableBooleanAdapter.toJson(writer, value_.enabled)
    writer.name("upload")
    nullableBooleanAdapter.toJson(writer, value_.fileSharingPublicUpload)
    writer.name("supports_upload_only")
    nullableBooleanAdapter.toJson(writer, value_.fileSharingPublicUploadOnly)
    writer.name("multiple")
    nullableBooleanAdapter.toJson(writer, value_.fileSharingPublicMultiple)
    writer.name("password")
    nullableFileSharingPublicPasswordAdapter.toJson(writer, value_.fileSharingPublicPassword)
    writer.name("expire_date")
    nullableFileSharingPublicExpireDateAdapter.toJson(writer, value_.fileSharingPublicExpireDate)
    writer.endObject()
  }
}
